async () => {
  // Envoyer les sessions Airtable vers Crossknowledge
  const config = input.config({
    title: "Configuration de la cr√©ation de sessions",
    description: "Un scrpit permettant de cr√©er de nouvelles sessions CK.",
    items: [
      input.config.table("sessionTable", {
        label: "La table des sessions",
      }),
      input.config.view("sessionView", {
        label: "La vue des des sessions √† cr√©er",
        parentTable: "sessionTable",
      }),
      input.config.table("learnerTable", {
        label: "La table des apprenants √† lier",
      }),
      input.config.view("learnerView", {
        label: "La vue des des apprenants √† lier",
        parentTable: "learnerTable",
      }),
      input.config.text("APIurl", {
        label: "Point de terminaison d‚ÄôAPI",
      }),
      input.config.text("APIkey", {
        label: "Cl√© API",
      }),
    ],
  });

  try {
    output.markdown("### Cr√©ation des sessions Crossknowledge");

    // r√©cup√©ration de tous les apprennants cr√©√©s
    let learnerQuery = await config.learnerView.selectRecordsAsync();

    // r√©cup√©ration des sessions √† cr√©er
    let sessionQuery = await config.sessionView.selectRecordsAsync();

    if (sessionQuery.records.length < 1) {
      output.markdown("---");
      output.markdown(
        `üÜó Aucune session √† cr√©er dans la vue "${config.sessionView.name}".`
      );
      // @ts-ignore
      return;
    }

    output.markdown("Liste des sessions √† cr√©er :");
    output.table(sessionQuery.records);

    // pr√©paration des donn√©es √† envoyer vers la LAMBDA
    const data = sessionQuery.records.map((sessionRecord) => {
      let learners = [];
      const cellLearners = sessionRecord.getCellValue("Apprenants");
      if (cellLearners) {
        // r√©cup√©re les champs guid, id, et email de chaque Apprenants en priorit√©
        learners = sessionRecord
          .getCellValue("Apprenants")
          .map((learnerRecord) => {
            // lien entre le champs de la session et d√©tail de l'apprennant
            const learnerCreated = learnerQuery.records.find(
              ({ id }) => learnerRecord.id === id
            );
            if (learnerCreated) {
              const guid = learnerCreated.getCellValue("GUID");
              if (guid) {
                return {
                  guid,
                  id: learnerCreated.getCellValue("Identifiant"),
                  email: learnerCreated.getCellValue("Email"),
                };
              }
            }
            throw {
              message:
                "L'apprennant n'a pas √©t√© retrouv√© dans la vue 'Comptes CK cr√©√©s' ou ne contient pas de GUID.",
              data: learnerRecord,
            };
          });
      }
      const data = {
        program: sessionRecord.getCellValue("Programme"),
        title: sessionRecord.getCellValue("Titre"),
        start: sessionRecord.getCellValue("Date de d√©but"),
        end: sessionRecord.getCellValue("Date de fin"),
        welcomeText: sessionRecord.getCellValue("Welcome text"),
        learners,
      };

      if (!data.title) {
        throw "Il manque un titre √† une session.";
      }
      if (!data.program) {
        throw "Il manque un programme √† cette session " + data.title + ".";
      }
      if (!data.start) {
        throw "Il manque une date de d√©but √† cette session " + data.title + ".";
      }
      return data;
    });
    output.text("‚úÖ Les sessions ont bien √©t√© v√©rifi√©es et format√©es.");

    // Envoie des sessions de mani√®re s√©quentielle pour √©viter que CK rejette certaines r√©ponses d√ª √† de trop nombreux appels
    for (const i in data) {
      const session = data[i];
      output.markdown(`üÜô Envoie de la session "${session.title}""`);
      const response = await fetch(config.APIurl, {
        method: "POST",
        body: JSON.stringify({ data: [session] }),
        headers: {
          "Content-Type": "application/json",
          "x-api-key": config.APIkey,
        },
      });

      const responseData = await response.json();
      if (responseData.ok) {
        // Si la lambda a cr√©√© les session
        output.markdown(
          `‚úÖ La session "${session.title}" a √©t√© cr√©√© dans Crossknowledge.`
        );
        await config.sessionTable.updateRecordsAsync(
          sessionQuery.records.map((record, i) => ({
            id: record.id,
            fields: {
              "Session CK cr√©er": true,
              GUID: responseData.data.guid[i],
            },
          }))
        );
        output.text(
          `‚úÖ La session "${session.title}" √† bien √©t√© mise √† jour dans Airtable.`
        );
      } else {
        // Si une erreur s'est produite durant la cr√©ation de sessions
        throw responseData; // renvoi de l'erreur vers le catch
      }
    }
    output.markdown("---");
    output.text(`üÜó Toutes les sessions ont bien √©t√© cr√©√©es`);
  } catch (err) {
    output.markdown("---");
    output.markdown("‚ùå Une erreur s'est produite lors de l'enregistrement.");
    output.markdown(
      "Veuillez contacter votre administrateur Konexio (üìß [airtable@konexio.eu](mailto:airtable@konexio.eu))."
    );
    throw err; // affichage de l'erreur
  }
};
